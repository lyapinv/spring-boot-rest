kind: Route
apiVersion: route.openshift.io/v1
metadata:
  name: spring-boot-rest-client
  namespace: tutorial
  labels:
    app: ingress-api-gateway
spec:
  to:
    kind: Service
    name: ingress-api-gateway-svc
    weight: 100
  port:
    targetPort: http2
  wildcardPolicy: None
---
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: spring-boot-rest-client-gateway
  namespace: tutorial
spec:
  selector:
    istio: ingress-api-gateway # use Istio default gateway implementation
    ns: dso-msa-services
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - "spring-boot-rest-client-tutorial.apps-crc.testing"
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: spring-boot-rest-client-ingress-vs
  namespace: tutorial
spec:
  hosts:
    - "spring-boot-rest-client-tutorial.apps-crc.testing"
  gateways:
    - spring-boot-rest-client-gateway
  http:
    - match:
        - uri:
            prefix: /ping
        - uri:
            prefix: /pingServer
        - uri:
            prefix: /cities
      route:
        - destination:
            port:
              number: 8080
            host: spring-boot-rest-client-svc.tutorial.svc.cluster.local

--- Создаем ServiceEntry, тк в нашем Control plane установлен флаг "defaultConfigVisibilitySettings",
--- поэтому для обраащения к сервисам другого Namespace нужно явно добавлять внешний сервис в реестр

apiVersion: networking.istio.io/v1alpha3
kind: ServiceEntry
metadata:
  name: spring-boot-rest-server
  namespace: tutorial
spec:
  hosts:
    - spring-boot-rest-server-svc.tutorial2.svc.cluster.local
  ports:
    - number: 8080
      name: http
      protocol: HTTP
  location: MESH_INTERNAL
  resolution: DNS